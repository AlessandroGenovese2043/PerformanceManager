version: '3.6'

services:

  simulator_service:
    container_name: simulator-service
    build:
      context: ../performance_manager
      dockerfile: Dockerfile
    image: simulator_service_image:base
    ports:
      - "8080:8080"
    restart: always

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-service
    restart: always
    ports:
      - "9090:9090"
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --web.enable-lifecycle
      - --storage.tsdb.retention.time=15d
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./prometheus.rules:/etc/prometheus/prometheus.rules

  pushgateway:
    container_name: pushgateway
    image: prom/pushgateway
    ports:
      - "9091:9091"

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.46.0
    container_name: mycadvisor
    restart: always
    ports:
      - '8082:8080'
    command:
      - '--docker_only=true'
      - '--housekeeping_interval=15s'
    privileged: true
    # cpus: 1
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      #- /cgroup:/cgroup:ro #doesn't work on MacOS only for Linux
    labels:
      org.label-schema.group: "monitoring"

  locust-exporter:
    image: containersol/locust_exporter:latest
    ports:
      - "9646:9646"
    environment:
      - LOCUST_EXPORTER_URI=http://loadgen:8089

  grafana:
    image: grafana/grafana-enterprise
    container_name: grafana
    restart: unless-stopped
    ports:
      - '3000:3000'
    volumes:
      - grafana_data:/var/lib/grafana

  loadgen:
    container_name: loadgen-service
    build:
      context: ../performance_manager/manager/utils/load-gen
      dockerfile: Dockerfile
    image: loadgen_service_image:base
    ports:
      - "8089:8089"
    environment:
      - PORT=8080
      - TARGET_ADDR=simulator-service:8080

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    restart: always
    volumes:
      - zookeeper_data_volume:/var/lib/zookeeper/data
      - zookeeper_log_volume:/var/lib/zookeeper/log
      - zookeeper_secrets_volume:/etc/zookeeper/secrets

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-service
    depends_on:
      - zookeeper
    expose:
      - "29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    restart: always
    volumes:
      - kafka_secrets_volume:/etc/kafka/secrets
      - kafka_data_volume:/var/lib/kafka/data

  client_service:
    container_name: client-service
    build:
      context: ../client_service
      dockerfile: Dockerfile
    image: client_service_image:base
    depends_on:
      - kafka
    restart: always

  monitor_service:
    container_name: monitor-service
    build:
      context: ../monitor_service
      dockerfile: Dockerfile
    image: monitor_service_image:base
    depends_on:
      - kafka
    restart: always

  analysis_service:
    container_name: analysis-service
    build:
      context: ../analysis_service
      dockerfile: Dockerfile
    image: analysis_service_image:base
    depends_on:
      - kafka
    restart: always

  planning_service:
    container_name: planning-service
    build:
      context: ../planning_service
      dockerfile: Dockerfile
    image: planning_service_image:base
    depends_on:
      - kafka
    restart: always

  execute_service:
    container_name: execute-service
    build:
      context: ../execute_service
      dockerfile: Dockerfile
    image: execute_service_image:base
    depends_on:
      - kafka
    restart: always

volumes:
  grafana_data: {}
  prometheus_data:
  zookeeper_data_volume:
  zookeeper_log_volume:
  zookeeper_secrets_volume:
  kafka_secrets_volume:
  kafka_data_volume:


